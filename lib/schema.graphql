enum Level {
  principiante
  intermedio
  avanzado
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  mail: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  mail: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  mail: String!
  phone: String
}

type Query {
  getCourses: [Course]
  getCourse(id: ID!): Course
  getPeople: [Person]
  getPerson(id: ID!): Person
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  decription: String!
  topic: String
  level: Level!
}

input PersonInput {
  name: String!
  mail: String!
  avatar: String
  phone: String
}

type Mutation {
  createCourse(input: CourseInput!): Course
  editCourse(id:ID!, input: CourseInput!): Course
  createPerson(input: PersonInput!): Person
  editPerson(id:ID!, input: PersonInput!): Person
  addPerson(courseID: ID!, studentID: ID!): Course
}
